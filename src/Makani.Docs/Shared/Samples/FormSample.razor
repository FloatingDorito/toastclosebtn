@inject ILogger<FormSample> Log

<div class="border-b border-slate-600 mb-4">
    <MkText Type="Typo.H3">Entry</MkText>
</div>
<div class="mb-10">
    <MkText Type="Typo.H5">Sizing</MkText>
    <MkText Type="Typo.Body" Css="mb-4">
        Control the size of <MkInlineCode>MkEntry</MkInlineCode> by using <MkLink Url="https://tailwindcss.com/docs/grid-template-columns" Target="LinkTarget.NewTab">Tailwind Grid Template Columns</MkLink>.
    </MkText>
    <div class="grid grid-cols-4 gap-4">
        <div class="col-span-4">
            <Entry Label="Full width" />
        </div>
        <div class="col-span-2">
            <Entry Label="Medium width"></Entry>
        </div>
        <div class="col-start-1 col-span-1">
            <Entry Label="Small width"></Entry>
        </div>
    </div>
    <MkCode Text="@markup" Language="@MkCode.Razor" Caption="Example" Css="my-4"></MkCode>
</div>

<div class="mb-10">
    <MkText Type="Typo.H5">Data binding</MkText>
    <MkText Type="Typo.Body" Css="mb-4">
        The <MkInlineCode>MkEntry</MkInlineCode> component supports an immediate mode or blur mode. The default is <MkInlineCode>EntryMode.Immediate</MkInlineCode>.
    </MkText>
    <div class="grid grid-cols-4 gap-4 mb-4">
        <div class="col-span-2">
            <Entry Label="Immediate mode" @bind-Value="Username"></Entry>
        </div>
        <div class="col-span-2 flex items-end">
            <MkText Type="Typo.Body">Value: @Username</MkText>
        </div>
    </div>
    <div class="grid grid-cols-4 gap-4 mb-4">
        <div class="col-span-2">
            <Entry Label="Delayed mode" Mode="EntryMode.Blur" HelperText="Hint: hit tab or click outside the input" @bind-Value="Delayed"></Entry>
        </div>
        <div class="col-span-2 flex items-center">
            <MkText Type="Typo.Body">Value: @Delayed</MkText>
        </div>
    </div>

    <MkText Type="Typo.H5">Validation</MkText>
    <MkText Type="Typo.Body" Css="mb-4">
        <strong>Built-in validation:</strong>

        <ul>
            <li>Required</li>
            <li>Min length</li>
            <li>Max length</li>
        </ul>
    </MkText>
    <div class="grid grid-cols-4 gap-4 mb-4">
        <div class="col-span-2">
            <Entry Label="Required username" Required="true" OnError="OnRequiredError" @bind-Value="Username"></Entry>
        </div>
        <div class="col-span-2 flex items-end">
            <MkText Type="Typo.Body">Value: @Username, Error: @RequiredError</MkText>
        </div>
    </div>

    <div class="grid grid-cols-4 gap-4 mb-4">
        <div class="col-span-2">
            <Entry Label="Min length username" MinLength="3" OnError="OnMinLenError" @bind-Value="Username"></Entry>
        </div>
        <div class="col-span-2 flex items-end">
            <MkText Type="Typo.Body">Value: @Username, Error: @MinLenError</MkText>
        </div>
    </div>

    <div class="grid grid-cols-4 gap-4 mb-4">
        <div class="col-span-2">
            <Entry Label="Max length username" MaxLength="10" OnError="OnMaxLenError" @bind-Value="Username"></Entry>
        </div>
        <div class="col-span-2 flex items-end">
            <MkText Type="Typo.Body">Value: @Username, Error: @MaxLenError</MkText>
        </div>
    </div>
</div>

@code {
    public string Username { get; set; }
    public string Delayed { get; set; }
    public string RequiredError { get; set; }
    public string MaxLenError { get; set; }
    public string MinLenError { get; set; }

    private string markup = @"<div class=""grid grid-cols-4 gap-4"">
    <div class=""col-span-4"">
        <Entry Label=""Full width""/>
    </div>
    <div class=""col-span-2"">
        <Entry Label=""Medium width""></Entry>
    </div>
    <div class=""col-start-1 col-span-1"">
        <Entry Label=""Small width""></Entry>
    </div>
</div>";

    // todo: integrate form mapping, this ideally should be more dynamic. 
    // this is far too verbose and manual for a pleasant dev experience
    public void OnRequiredError(IList<ValidationResult> validation)
    {
        RequiredError = string.Join(',', validation.Select(p => p.Message));
    }

    public void OnMinLenError(IList<ValidationResult> validation)
    {
        MinLenError = string.Join(',', validation.Select(p => p.Message));
    }

    public void OnMaxLenError(IList<ValidationResult> validation)
    {
        MaxLenError = string.Join(',', validation.Select(p => p.Message));
    }

}
